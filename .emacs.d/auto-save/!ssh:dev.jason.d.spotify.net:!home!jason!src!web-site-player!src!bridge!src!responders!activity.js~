(function() {

  var Link = Spotify.Link;
  var Responder = Spotify.App.Responder;

  new Responder({
    _ready: false,

    init: function(core) {
      var service = this.service = core.presence;
      service.onReady(this.start, this);
    },

    start: function() {
      this._ready = true;
      this.unqueue();
    },

    good: function(reply, args, items) {
      var payload = this;
    },

    handleError: function(reply, code) {
      var type, message;
      switch (code.code) {
        case 404:
          type = 'not-found';
          message = 'No activity found.';
          break;

        default:
          type = 'transient';
          message = 'Possible issues with the presence service.';
      }
      return reply.fail(type, message);
    },

    '@feed_activities_snapshot': function(data, reply) {
      var args = data.args,
        user = data.args[0] ? Link.fromString(args[0]).username : null,
        offset = data.args[1], length = data.args[2];
      if (user === '@') user = null;
      this.service.getHistory(user, this.good.bind(this, reply, args), this.handleError.bind(this, ));
    }
  });
})();